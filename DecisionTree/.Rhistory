model2 = lm(y~x+z)
model2
z = c(3,3,3,3,3)
model2 = lm(y~x+z)
model2
x = c(2,2.4,4,5,6.5)
model2 = lm(y~x+z)
model2
model2 = lm(y~ x*z )
model2
z = c(3,33,333,3333,33333)
model2 = lm(y~ x*z )
model2
summary(model2)
x = c(2,3,4,5,6)
model2 = lm(y~ x*z )
summary(model2)
model2 = lm(y~ I(x+z) )
summary(model2)
model2 = lm(y~ I(x,z) )
model2 = lm(y~x+z+I(x+z))
summary(model2)
model2 = lm(y~x+z+I(xz))
model2 = lm(y~x+z+I(x*z))
summary(model2)
model2 = lm(y~x*z)
summary(model2)
model2 = lm(y~x*z)
summary(model2)
plot(y~x)
plot(y~x, type = "l")
plot(y~x, type = "p")
plot(y~x, type = "h")
plot(y~x, type = "f")
plot(y~x, type = "o")
plot(y~x, type = "s")
y = c(1,2,5,4,3)
x = c(2,3,6,5,4)
plot(y~x, type = "s")
plot(y~x, type = "n")
plot(y~x, type = "b")
plot(y~x, type = "c")
hist(x)
hist(y)
hist(x)
hist(y)
hist(x = y)
hist(y,breaks = c(1,2,3,4))
hist(y,breaks = c(1,2,3,4,5))
hist(y,breaks = c(1,1,1,1,1))
hist(y,breaks = c(2,3,4,5,6))
hist(y,breaks = c(0,1,2,3,4))
hist(y,col = "blue")
hist(y,col = 1:5)
hist(y,col = 1:4)
hist(y,col = 1:3)
hist(y,col = 1:4)
hist(c(10,11,15,32))
hist(y,col = 1:4,breaks = c(0,1,2,3))
hist(y,col = 1:4,breaks = c(0,1,2,3,4))
hist(y,col = 1:4,breaks = c(0,1,2,3,4,5))
qqnorm(x)
qqnorm(y)
summary(y)
curve(x^2, 0, 10)
curve(y^2, 0, 10)
curve(x^2, 0, 10)
curve(c(1,2,3,4,5)^2, 0, 10)
curve(x^2, 0, 10)
curve(x^2, 0, 20)
curve(x^2, 0, 10)
curve(x^3, 0, 10)
curve(x^10, 0, 10)
curve(x^2+2, 0, 10)
curve(x^2, -2, 10)
curve(x^3, -2, 10)
x=NULL
curve(x^3, -2, 10)
curve(x^3, -10, 10)
points(x,y)
x = c(2,3,6,5,4)
y = c(1,2,5,4,3)
points(x,y)
plot(type = "n")
plot(x,type = "n")
points(x,y)
grid(x,y)
plot(y~x, type = "l", size = "2")
plot(y~x, type = "l", size = 2)
plot(y~x, type = "l", border = 2)
plot(y~x, type = "l")
plot(y~x)
plot(y~x,type = "l")
grid(nx = 5, ny = 5)
grid(nx = 5, ny = 5,lwd = 1)
grid(nx = 5, ny = 5,lwd = 2)
grid(nx = 5, ny = 5,lwd = 5)
grid(nx = 5, ny = 5,lty = 1)
grid(nx = 5, ny = 5,lty = 2)
grid(nx = 5, ny = 5,x)
grid(nx = 5, ny = 5)
plot(y~x,type = "l")
grid(nx = 5, ny = 5)
segments(x[1],y[1],x[2],y[2])
plot(y~x,type = "l")
points(x,y)
plot(y~x)
segments(x[1],y[1],x[2],y[2])
segments(x[1],y[1],x[2],y[5])
arrows(x[1],y[1],x[2],y[2] )
text(x)
x=c(1,2,3,4) ; y=c(12,23,13,16)
plot(x,y,  type=”n”)  # type=”n” does not show any plotting
plot(x,y,  type="n")  # type=”n” does not show any plotting
grid() # shows grid lines
points(x,y) # now points will be shown in plotted form
text(2,20, “This is a sample Graph”)  # shows the text at location (2,20)
text(2,20, "This is a sample Graph")  # shows the text at location (2,20)
summary(x)
boxplot(x)
boxplot(x,range = -10:10)
boxplot(x)
x
1.5*5
3.5-1.5
1.5*2
1.5*3
-1.5*2
-1.5*2.5
3.5+3
IQR
IQR(x)
summary(x)
boxplot(x)
summary(boxplot(x))
3.25-1.75
z = c(7,7,31,31,47,75)
z = c(7,7,31,31,47,75,,87,115,116,119,119,115,177)
z = c(7,7,31,31,47,75,87,115,116,119,119,115,177)
length(z)
summary(z)
IRQ(z)
IQR(z)
boxplot(z)
1.25+(1.25-0.45)*1.5
3*IQR(z)
boxplot(x)
IQR(x)
3*IQR(x)
-3*IQR(x)
(1/3)*IQR(x)
1.5+IQR(x)
1.5-IQR(x)
IQR(x)
IQR(x)+3.5
IQR(x)*1.5
IQR(x)*1.5+2.5
IQR(x)+2.5
IQR(x)-2.5
score = c(3,5,7,5,3,2,6,8,5,9,8,11)
barplot(score)
hist(score)
barplot(score)
hist(score,breaks = 3:11)
hist(score,breaks = 3:12)
hist(score,breaks = c(2,3,4,5,6,7,8,9,10,11,12,13))
hist(score,breaks = 2:13)
hist(score,breaks = 2:12)
hist(score,breaks = 2:11)
barplot(score)
rank(score)
?rank
summary(score)
1
rel.hts <- rank(score) / length(score)
rel.hts
grays <- gray(1 - rel.hts)
grays
barplot(score, col=grays)
grays <- gray(rank(score))
barplot(score, col=grays)
x = 1:5
x
sd(x)
sd(x)^2
var(x)
summary(x)
quantile(x)
fivenum(x)
class(summary(x))
class(quantile(x))
class(fivenum(x))
mode(quantile(x))
log(x)
plot(log(x))
plot(log(x)/5)
plot(log(x))
plot(log(x),xlim = c(1.5))
plot(log(x),xlim = c(1,5))
plot(log(x),xlim = c(1,5), ylim = c(1,5))
plot(log(x),xlim = c(1,5), ylim = c(0,2))
plot(log(x),xlim = c(1,5), ylim = c(0,5))
plot(log(x),xlim = c(0,5), ylim = c(0,5))
grid()
plot(y~log(x),xlim = c(0,5), ylim = c(0,5))
plot(y~x,xlim = c(0,5), ylim = c(0,5), log(x))
plot(y~x,xlim = c(0,5), ylim = c(0,5), log = "x")
plot(y~x,xlim = c(0,5), ylim = c(0,5))
y = 1:5
plot(y~x,xlim = c(0,5), ylim = c(0,5))
plot(y~x,xlim = c(0,5), ylim = c(0,5), log = "x")
plot(y~x,xlim = c(0,5), ylim = c(0,5))
plot(y~x,xlim = c(0,5), ylim = c(0,5))
grid()
cumsum(x)
cummax(x)
cummin(x)
cumprod(x)
sample=data.frame(x=1:4, y=5:8)
sapply(sample, mean, na.rm=T)
lapply(sample, mean, na.rm=T)
lapply(sample, mean, na.rm=T)
tapply(sample, mean, na.rm=T)
tapply(sample, mean, na.rm=T)
aapply(sample, mean, na.rm=T)
apply(sample, mean, na.rm=T)
sapply(sample, mean, na.rm=T)
sapply(sample, range, na.rm=T)
x=matrix(c(1,2,3,6,5,6),2,3, byrow=T)
x
apply(x,1,sum)
apply(x,2,sum)
plot(model)
plot(model1)
model = lm(y~x)
y = c(1,2,5,4,3)
x = c(2,3,6,5,4)
model = lm(y~x)
plot(y~x)
plot(model)
y = c(1,2,5,4,3)
x = c(2,3,6,5,4)
model = lm(y~x)
plot(y~x)
abline(m)
abline(y~x)
model = lm(y~x)
plot(y~x)
abline(y~x)
abline(x~y)
abline(model)
x=matrix(c(1,2,3,6,5,6),2,3, byrow=T)
tapply(mtcars$wt, mtcars$cyl, mean)
x = 1:5
y=6:10
mapply(sum,x,y)
sapply(x,sum)
sapply(data.frame(x,y),sum)
sapply(data.frame(y,x),sum)
sample=data.frame(x=1:4, y=5:8)
sapply(sample, sum, na.rm=T)
sapply(sample, mean, na.rm=T)
mapply(sum,x,y)
x = 1:5
y=6:10
mapply(sum,x,y)
x+y
mtcats
mtcars
tapply(mtcars$wt, mtcars$cyl, mean)
x = 1:40
y = 2:41
mod = lm(y~x)
summary(mod)
x = 1:100
y = 2:101
mod = lm(y~x)
summary(mod)
m1=lm(Volume ~ Girth+Height, data=trees)
m1
summary(m1)
anova(m1)
length(trees)
length(trees$Girth)
aov(Volume ~ Girth+Height, data=trees)
carsD = stack(cars)
carsD
cars
carsD
oneway.test(values~ind,data = carsD)
m <- aov(x ~ f, data=carsData)
summary(m)
m <- aov(values ~ ind, data=carsData)
summary(m)
m <- aov(values ~ ind, data=carsD)
summary(m)
m
oneway.test(values~ind,data = carsD)
summary(m)
kruskal.test(values~ind, data=carsD)
TukeyHSD(m)
plot(TukeyHSD(m))
cars
?TukeyHSD
mean(carsD$values)
mean(cars$speed)-mean(cars$dist)
min(cars$speed)
max(cars$speed)
min(cars$dist)
max(cars$dist)
pw.aov
m1 = aov(Volume ~ Girth+Height, data=trees)
m1
TukeyHSD(m1)
trees1 = stack(trees)
m1 = aov(values~ind, data=trees1)
TukeyHSD(m1)
tr1.aov=aov(Volume ~ Girth+Height, data=trees)
tr2.aov=aov(Volume ~ Girth*Height, data=trees)
tr1.aov
tr2.aov
anova(tr1.aov, tr2.aov)
mtcars
m1 = glm(vs~mpg, data = mtcars, family = "binomial")
m1
mtcars
nrows(mtcars)
nrow(mtcars)
m1
summary(m1)
resid(m1)
min(resid(m1))
carsD = stack(cars)
oneway.test(values~ind,data = carsD)
summary(oneway.test(values~ind,data = carsD))
m <- aov(values ~ ind, data=carsD)
summary(m)
kruskal.test(values~ind, data=carsD)
summary(m)
m
TukeyHSD(m)
tr1.aov=aov(Volume ~ Girth+Height, data=trees)
tr2.aov=aov(Volume ~ Girth*Height, data=trees)
anova(tr1.aov, tr2.aov)
ibm.daily <- zoo(prices, dates)
prices <- c(132.45, 130.85, 130.00, 129.55, 130.85)
dates <- as.Date(c("2010-01-04", "2010-01-05", "2010-01-06","2010-01-07","2010-01-08"))
ibm.daily <- zoo(prices, dates)
ibm.daily1 <- xts(prices,dates)
ibm.daily
library("xts")
library("zoo")
prices <- c(132.45, 130.85, 130.00, 129.55, 130.85)
dates <- as.Date(c("2010-01-04", "2010-01-05", "2010-01-06","2010-01-07","2010-01-08"))
ibm.daily <- zoo(prices, dates)
ibm.daily1 <- xts(prices,dates)
ibm.daily
ibm.daily1
class(ibm.daily)
class(ibm.daily1)
is.data.frame(ibm.daily)
is.data.frame(ibm.daily1)
x = 1:5
summary(x)
quantile(x)
fivenum(x)
cumsum(x)
sapply(x,mean)
mtcars
tapply(mtcars$wt, mtcars$cyl, mean)
y = 1:5
points(x,y)
points(y~x)
points(x,y)
plot(x,y,type="n")
points(x,y)
lines()
lines(x,y)
text(3,3,"assless0")
pie(x)
summary(m1)
x=c(1,2,1,5,20,24,35,76,3,79)
s=dist(x)
s
hclust1=hclust(s)
hclust1
plot(hclust1)
plot(clust)
ck=kmeans(v, 5, nstart=25)
ck
ck$cluster
plot(v, col=ck$cluster)
plot(x, col = clust1$cluster)
points(clust1$centers, col=1:3, pch=6, cex=2)
auto.arima(ibm.daily)
library("forecast")
auto.arima(ibm.daily)
arima(ibm.daily1, order = c(0,0,0))
m = arima(ibm.daily1, order = c(0,0,0))
predict(m)
predict(m)
predict(m,n.ahead = 2)
predict(m,n.ahead = 4)
tsdiag(m)
predict(m)
install.packages("party")
library(party)
setwd("/home/roshan/workspace/R Studio/R-Pr/")
data <- read.csv(file = "wineQualityWhites.csv", sep = ",", header = TRUE)
library(corrplot)
library(caTools)
cr <- cor(data[c(-1)])
corrplot(cr, type = "lower")
setwd("/home/roshan/workspace/R Studio/DataMining/")
data <- read.csv(file = "wineQualityWhites.csv", sep = ",", header = TRUE)
setwd("/home/roshan/workspace/R Studio/DataMining/")
library(party)
library(corrplot)
library(caTools)
data <- read.csv(file = "wineQualityWhites.csv", sep = ",", header = TRUE)
cr <- cor(data[c(-1)])
corrplot(cr, type = "lower")
data$quality.factor <- as.factor(data$quality)
levels(data$quality.factor)
ggplot(data = data, aes(x = quality)) +
geom_histogram(binwidth = 1)
library(ggplot2)
setwd("/home/roshan/workspace/R Studio/DataMining/")
library(party)
library(corrplot)
library(caTools)
library(ggplot2)
data <- read.csv(file = "wineQualityWhites.csv", sep = ",", header = TRUE)
cr <- cor(data[c(-1)])
corrplot(cr, type = "lower")
data$quality.factor <- as.factor(data$quality)
levels(data$quality.factor)
ggplot(data = data, aes(x = quality)) +
geom_histogram(binwidth = 1)
for(i in 1:nrow(data)){
if(data$quality[[i]] < 6){
data$quality.order[[i]] <- "Bad"
}else{
data$quality.order[[i]] <- "Good"
}
}
i <- j <- 0
for(q in data$quality.order){
if(q == "Bad"){
i <- i+1
}else{
j <- j+1
}
}
print(i)
print(j)
data$quality.order <- factor(factor(data$quality.order), levels = c("Bad", "Good"))
for(i in 1:nrow(data)){
if(data$quality.order[[i]] == "Bad"){
data$quality.num[[i]] <- 0
}else{
data$quality.num[[i]] <- 1
}
}
train.data <- read.csv(file = "train_data.csv", sep = ",", header = TRUE)
value <- sample.split(data$X, SplitRatio = 0.7)
train.data <- subset(data, value == TRUE)
test.data <- subset(data, value == FALSE)
write.csv(train.data, file = "train_data.csv")
write.csv(test.data, file = "test_data.csv")
train.data <- read.csv(file = "train_data.csv", sep = ",", header = TRUE)
test.data <- read.csv(file = "test_data.csv", sep = ",", header = TRUE)
setwd("/home/roshan/workspace/R Studio/DataMining/")
library(party)
library(corrplot)
library(caTools)
library(ggplot2)
data <- read.csv(file = "wineQualityWhites.csv", sep = ",", header = TRUE)
cr <- cor(data[c(-1)])
corrplot(cr, type = "lower")
data$quality.factor <- as.factor(data$quality)
levels(data$quality.factor)
ggplot(data = data, aes(x = quality)) +
geom_histogram(binwidth = 1)
for(i in 1:nrow(data)){
if(data$quality[[i]] < 6){
data$quality.order[[i]] <- "Bad"
}else{
data$quality.order[[i]] <- "Good"
}
}
i <- j <- 0
for(q in data$quality.order){
if(q == "Bad"){
i <- i+1
}else{
j <- j+1
}
}
print(i)
print(j)
data$quality.order <- factor(factor(data$quality.order), levels = c("Bad", "Good"))
for(i in 1:nrow(data)){
if(data$quality.order[[i]] == "Bad"){
data$quality.num[[i]] <- 0
}else{
data$quality.num[[i]] <- 1
}
}
train.data <- read.csv(file = "train_data.csv", sep = ",", header = TRUE)
test.data <- read.csv(file = "test_data.csv", sep = ",", header = TRUE)
View(train.data)
